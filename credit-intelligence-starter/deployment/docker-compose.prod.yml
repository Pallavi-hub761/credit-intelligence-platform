version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: credit_intelligence
      POSTGRES_USER: credit_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U credit_user -d credit_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://credit_user:${POSTGRES_PASSWORD}@postgres:5432/credit_intelligence
      REDIS_URL: redis://redis:6379
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      FRED_API_KEY: ${FRED_API_KEY}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./mlruns:/app/mlruns
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  mlflow:
    image: python:3.9-slim
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://credit_user:${POSTGRES_PASSWORD}@postgres:5432/mlflow
               --default-artifact-root ./mlruns"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./mlruns:/mlruns

  scheduler:
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: python -m mlops.scheduler
    environment:
      DATABASE_URL: postgresql://credit_user:${POSTGRES_PASSWORD}@postgres:5432/credit_intelligence
      REDIS_URL: redis://redis:6379
      MLFLOW_TRACKING_URI: http://mlflow:5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      mlflow:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./mlruns:/app/mlruns

volumes:
  postgres_data:
  redis_data:
